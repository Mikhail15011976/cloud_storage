const fs = require('fs');
const path = require('path');

class MemoryLeakDetector {
  constructor() {
    this.issues = [];
    this.patterns = [
      {
        name: 'setInterval –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏',
        pattern: /setInterval\s*\([^)]*\)/g,
        cleanup: /clearInterval/,
        severity: 'high'
      },
      {
        name: 'EventListener –±–µ–∑ removeEventListener',
        pattern: /addEventListener\s*\([^)]*\)/g,
        cleanup: /removeEventListener/,
        severity: 'high'
      },
      {
        name: 'AbortController –±–µ–∑ abort()',
        pattern: /new\s+AbortController\s*\(\s*\)/g,
        cleanup: /\.abort\s*\(\s*\)/,
        severity: 'high'
      },
      {
        name: 'createObjectURL –±–µ–∑ revokeObjectURL',
        pattern: /(URL\.)?createObjectURL\s*\([^)]*\)/g,
        cleanup: /revokeObjectURL/,
        severity: 'medium'
      },
      {
        name: 'setTimeout –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏ (–¥–æ–ª–≥–∏–π)',
        pattern: /setTimeout\s*\([^)]*,\s*(1[0-9]{3,}|[2-9][0-9]{3,})/g,
        cleanup: /clearTimeout/,
        severity: 'medium'
      },
      {
        name: '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –±–µ–∑ –æ—Ç–ø–∏—Å–∫–∏',
        pattern: /\.on\s*\([^)]*\)|\.subscribe\s*\([^)]*\)/g,
        cleanup: /\.off|\.unsubscribe/,
        severity: 'medium'
      },
      {
        name: '–ù–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è/—Ä–µ—Å—É—Ä—Å—ã',
        pattern: /(open|create|connect)\s*\([^)]*\)/g,
        cleanup: /(close|destroy|disconnect)\s*\([^)]*\)/,
        severity: 'high'
      }
    ];
  }

  scanProject() {
    console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏...\n');
    
    const srcPath = path.join(__dirname, '../src');
    if (!fs.existsSync(srcPath)) {
      console.error('‚ùå –ü–∞–ø–∫–∞ src –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
      return false;
    }

    const files = this.getAllFiles(srcPath);
    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files.length}`);

    let totalIssues = 0;

    files.forEach(file => {
      if (this.isJavaScriptFile(file)) {
        const issues = this.scanFile(file);
        totalIssues += issues;
      }
    });

    this.generateReport(totalIssues);
    return totalIssues === 0;
  }

  getAllFiles(dirPath, arrayOfFiles = []) {
    try {
      const files = fs.readdirSync(dirPath);

      files.forEach(file => {
        const fullPath = path.join(dirPath, file);
        const stat = fs.statSync(fullPath);

        if (stat.isDirectory()) {
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º node_modules –∏ —Å–∫—Ä—ã—Ç—ã–µ –ø–∞–ø–∫–∏
          if (!file.includes('node_modules') && !file.startsWith('.')) {
            this.getAllFiles(fullPath, arrayOfFiles);
          }
        } else {
          arrayOfFiles.push(fullPath);
        }
      });

      return arrayOfFiles;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–ø–∫–∏ ${dirPath}:`, error.message);
      return arrayOfFiles;
    }
  }

  isJavaScriptFile(filePath) {
    return /\.(js|jsx)$/.test(filePath);
  }

  scanFile(filePath) {
    let fileIssues = 0;
    
    try {
      const content = fs.readFileSync(filePath, 'utf8');
      const lines = content.split('\n');
      const relativePath = path.relative(path.join(__dirname, '..'), filePath);

      this.patterns.forEach(patternConfig => {
        lines.forEach((line, index) => {
          const matches = line.match(patternConfig.pattern);
          if (matches) {
            matches.forEach(match => {
              const hasCleanup = this.checkForCleanup(content, patternConfig.cleanup, match);
              
              if (!hasCleanup) {
                fileIssues++;
                this.issues.push({
                  file: relativePath,
                  line: index + 1,
                  pattern: patternConfig.name,
                  match: match.trim(),
                  severity: patternConfig.severity
                });
              }
            });
          }
        });
      });

      if (fileIssues > 0) {
        console.log(`‚ùå ${relativePath}: –Ω–∞–π–¥–µ–Ω–æ ${fileIssues} –ø—Ä–æ–±–ª–µ–º`);
      }

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${filePath}:`, error.message);
    }

    return fileIssues;
  }

  checkForCleanup(content, cleanupPattern, match) {
    // –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è cleanup —Ñ—É–Ω–∫—Ü–∏–∏
    if (cleanupPattern.test(content)) {
      return true;
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    const heuristicPatterns = [
      /useEffect.*return.*function/, // Cleanup –≤ useEffect
      /componentWillUnmount/,        // React lifecycle
      /destroy|dispose|cleanup/,     // –û–±—â–∏–µ cleanup —Å–ª–æ–≤–∞
      /finally\s*{/                  // finally –±–ª–æ–∫
    ];

    return heuristicPatterns.some(pattern => pattern.test(content));
  }

  generateReport(totalIssues) {
    console.log('\nüìä –û–¢–ß–ï–¢ –û –ü–†–û–í–ï–†–ö–ï –ü–ê–ú–Ø–¢–ò');
    console.log('=' .repeat(50));

    if (totalIssues === 0) {
      console.log('‚úÖ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!');
      return;
    }

    console.log(`‚ùå –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º: ${totalIssues}\n`);

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã –ø–æ —Ñ–∞–π–ª–∞–º
    const issuesByFile = this.issues.reduce((acc, issue) => {
      if (!acc[issue.file]) acc[issue.file] = [];
      acc[issue.file].push(issue);
      return acc;
    }, {});

    Object.entries(issuesByFile).forEach(([file, issues]) => {
      console.log(`\nüìÑ ${file}:`);
      issues.forEach(issue => {
        const severityIcon = issue.severity === 'high' ? 'üî¥' : 'üü°';
        console.log(`   ${severityIcon} –°—Ç—Ä–æ–∫–∞ ${issue.line}: ${issue.pattern}`);
        console.log(`      –ü—Ä–∏–º–µ—Ä: ${issue.match.substring(0, 60)}...`);
      });
    });

    const highSeverity = this.issues.filter(i => i.severity === 'high').length;
    const mediumSeverity = this.issues.filter(i => i.severity === 'medium').length;

    console.log('\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log(`   üî¥ –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫: ${highSeverity}`);
    console.log(`   üü° –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫: ${mediumSeverity}`);
    
    console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    console.log('   1. –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –∏ —Ç–∞–π–º–∞—É—Ç—ã');
    console.log('   2. –£–¥–∞–ª—è–π—Ç–µ event listeners –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏');
    console.log('   3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ AbortController –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø—Ä–æ—Å–æ–≤');
    console.log('   4. –û—Å–≤–æ–±–æ–∂–¥–∞–π—Ç–µ URL.createObjectURL()');
    console.log('   5. –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ cleanup —Ñ—É–Ω–∫—Ü–∏–∏ –≤ useEffect');
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
if (require.main === module) {
  const detector = new MemoryLeakDetector();
  const success = detector.scanProject();
  process.exit(success ? 0 : 1);
}

module.exports = MemoryLeakDetector;